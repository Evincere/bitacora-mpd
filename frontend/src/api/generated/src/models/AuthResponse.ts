/* tslint:disable */
/* eslint-disable */
/**
 * Bitácora MPD API
 * API para la aplicación Bitácora MPD
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthResponseUser } from './AuthResponseUser';
import {
    AuthResponseUserFromJSON,
    AuthResponseUserFromJSONTyped,
    AuthResponseUserToJSON,
} from './AuthResponseUser';

/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    accessToken?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    refreshToken?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    tokenType?: string;
    /**
     * 
     * @type {number}
     * @memberof AuthResponse
     */
    expiresIn?: number;
    /**
     * 
     * @type {AuthResponseUser}
     * @memberof AuthResponse
     */
    user?: AuthResponseUser;
}

/**
 * Check if a given object implements the AuthResponse interface.
 */
export function instanceOfAuthResponse(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function AuthResponseFromJSON(json: any): AuthResponse {
    return AuthResponseFromJSONTyped(json, false);
}

export function AuthResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthResponse {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'accessToken': !exists(json, 'accessToken') ? undefined : json['accessToken'],
        'refreshToken': !exists(json, 'refreshToken') ? undefined : json['refreshToken'],
        'tokenType': !exists(json, 'tokenType') ? undefined : json['tokenType'],
        'expiresIn': !exists(json, 'expiresIn') ? undefined : json['expiresIn'],
        'user': !exists(json, 'user') ? undefined : AuthResponseUserFromJSON(json['user']),
    };
}

export function AuthResponseToJSON(value?: AuthResponse | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'accessToken': value.accessToken,
        'refreshToken': value.refreshToken,
        'tokenType': value.tokenType,
        'expiresIn': value.expiresIn,
        'user': AuthResponseUserToJSON(value.user),
    };
}

